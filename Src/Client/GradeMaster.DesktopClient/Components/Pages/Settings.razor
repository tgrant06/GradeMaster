@page "/settings"
@using System.Diagnostics
@using System.Text.Json
@using GradeMaster.DesktopClient.Json

<TopPageHeader>Settings</TopPageHeader>
@* <br/> *@
<section class="transform-stack-container">
    <div class="border-top animated-top-line" style="width: 100%; max-width: 50%; margin-top: 15px"></div>

    <div class="container animated-page-content">
        <div class="border-top generic-devider-line" style="margin-top: -1px;"></div>
        <div class="py-2"></div>
        <h3>Settings</h3>
        <h5 style="margin-left: 10px;">Personalization</h5>
        <div style="margin-left: 15px;">
            <label>Theme: </label>
            <ThemeSwitcher/>
        </div>

        <br/>
        
        <h5 style="margin-left: 10px;">Data</h5>
        <div style="margin-left: 15px;">
            <label>Database Location: </label>
            <div style="margin-left: 5px;">
                <RadioInput Name="EnableNotifications" Label="Use local Database location" @bind-Value="_isDatabaseStoredLocal" Disabled="_disabled" />
                <RadioInput Name="EnableNotifications" Label="Use OneDrive Database location" @bind-Value="_isDbStoredOneDrive" Disabled="_disabled" />

                <p style="margin-top: 5px;">Currently Using: @(_appPreferences.SaveDbFileToOneDriveLocation ? "OneDrive Database location" : "Local Database location")</p>
                    <Button Color="ButtonColor.Primary" Style="margin-right: 6px;" Class="btn-show-content" 
                            @onclick="SaveAppPreferences" 
                            Disabled="Disabled">
                        <Icon Name="IconName.Floppy"/> Save
                    </Button>
                <Tooltip Title="After saving the app will be relaunched." Placement="TooltipPlacement.Right">
                    <Badge Style="padding: 4px !important; transform: translate(0, 2px);" Color="BadgeColor.Secondary"><Icon Size="IconSize.x6" Name="IconName.InfoLg" /></Badge>
                </Tooltip>
                @*<span>After saving the app will be relaunched.</span>
                <br/>
                <Button Color="ButtonColor.Primary" @onclick="DisconnectDb">Disconnect Database</Button>
                <Button Color="ButtonColor.Primary" @onclick="ConnectToDb">Connect to Database</Button>
                <br />
                <Button Color="ButtonColor.Primary" @onclick="DisposeDbContext">Dispose Context</Button> *@
            </div>
        </div>

        <br/>
        <div class="border-top generic-devider-line" style="opacity: 0.75;"></div>
        <br/>

        <h3>About this Application</h3>
        <p style="margin-bottom: 0.4rem;">
            <strong>Grade Master</strong> is a feature rich grade management tool that helps you manage your education, subjects, and grades.
            <br/><br/>
            <strong>Version Information:</strong>
        </p>
        <p style="margin-bottom: 0.5rem;">
            - <strong>Installed Version:</strong> <span id="installedVersion">3.0.7</span>
            <span id="currentInstalledVersion" class="alert alert-secondary" style="padding: 2px 5px; white-space: nowrap;">
                Checking...
            </span>
        </p>
        <p>
            - <strong>Latest Available Version:</strong>
            <a id="latestAvailableVersion" class="alert alert-primary" style="padding: 2px 5px; white-space: nowrap; text-decoration: none;" href="https://github.com/tgrant06/GradeMaster/releases" target="_blank">
                Checking...
            </a>
            @*  <a href="https://github.com/tgrant06/GradeMaster/releases" target="_blank">
            <img src="https://img.shields.io/github/v/release/tgrant06/GradeMaster" alt="Release Version Badge">
        </a> *@
        </p>

        <NavLink class="btn btn-translucient border-dark-subtle" href="info" Match="NavLinkMatch.Prefix">
            <Icon Name="IconName.InfoCircle"/> Info
        </NavLink>

        <NavLink style="margin-left: 10px;" class="btn btn-translucient border-dark-subtle" href="licenses" Match="NavLinkMatch.Prefix">
            <Icon Name="IconName.FileEarmarkText"/> Licenses
        </NavLink>

        <div style="margin-bottom: 40px;"></div>
        <div class="border-top generic-devider-line" style="opacity: 0.75;"></div>
        <br/>

        <h3>Help</h3>
        <p>If you have any questions or need help, refer to the page below.</p>
        <NavLink class="btn btn-translucient border-dark-subtle" href="faq" Match="NavLinkMatch.Prefix">
            <Icon Name="IconName.QuestionCircle"/> FAQ
        </NavLink>
    
        <NavLink style="margin-left: 10px;" class="btn btn-translucient border-dark-subtle" href="tipsandtricks" Match="NavLinkMatch.Prefix">
            <Icon Name="IconName.Lightbulb" /> Tips & Tricks
        </NavLink>

        <div style="margin-bottom: 100px;"></div>

        @* <div class="border-top" style="width: 100%;"></div> *@
    </div>
</section>

<script>
    //window.scrollTo({ top: 0, behavior: 'auto' });
    document.querySelector(".content").scrollIntoView({ block: 'start', behavior: 'instant' });
    window.checkForUpdates();
</script>


@code {

    // [Inject]
    // private IDbContextUtilities DbContextUtilities { get; set; } = default!;

    #if DEBUG
        private const string AppName = "GradeMasterDev";
    #elif RELEASE
        private const string AppName = "GradeMaster";
    #endif

    private bool _isDatabaseStoredLocal = true;

    private bool _isDbStoredOneDrive;

    private bool _disabled;

    public bool Disabled => _disabled ? _disabled /*true*/ : _appPreferences.SaveDbFileToOneDriveLocation == _isDbStoredOneDrive;

    private AppPreferencesObject _appPreferences = new();

    private readonly string _appDataPath = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData), AppName, "Data");

    private readonly string _oneDriveDataPath = Path.Combine(Environment.GetEnvironmentVariable("OneDrive") ?? 
                                                             Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.UserProfile), "OneDrive"), "Apps", AppName, "Data");

    private readonly string _appSettingsFile = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData), AppName, "Data", "appPreferences.json");

    protected override async Task OnInitializedAsync()
    {
        if (File.Exists(_appSettingsFile))
        {
            var appPreferencesJsonString = await File.ReadAllTextAsync(_appSettingsFile);
            var currentAppPreferences = JsonSerializer.Deserialize(appPreferencesJsonString, AppJsonContext.Default.AppPreferencesObject);
            _appPreferences = currentAppPreferences ?? new AppPreferencesObject();

            _isDatabaseStoredLocal = !_appPreferences.SaveDbFileToOneDriveLocation;
            _isDbStoredOneDrive = _appPreferences.SaveDbFileToOneDriveLocation;
        }

    }

    async Task SaveAppPreferences()
    {
        _appPreferences.SaveDbFileToOneDriveLocation = _isDbStoredOneDrive;

        _disabled = true;

        const string dbName = "GradeMaster.db";

        var localDb = Path.Combine(_appDataPath, dbName);
        var oneDriveDb = Path.Combine(_oneDriveDataPath, dbName);

        if (!Directory.Exists(_oneDriveDataPath)) Directory.CreateDirectory(_oneDriveDataPath);

        // copy existing db file if not existing
        if (_appPreferences.SaveDbFileToOneDriveLocation) // copy from local data directory
        {
            if (!File.Exists(oneDriveDb)) File.Copy(localDb, oneDriveDb);
        }
        else
        {
            if (!File.Exists(localDb)) File.Copy(oneDriveDb, localDb);
        }

        string tempFile = _appSettingsFile + ".tmp";

        // write to temp file
        await using (var fileStream = File.Create(tempFile))
        {
            await JsonSerializer.SerializeAsync(
                fileStream,
                _appPreferences,
                AppJsonContext.Default.AppPreferencesObject
            );
        }

        // replace original atomically
        File.Copy(tempFile, _appSettingsFile, overwrite: true);
        File.Delete(tempFile);

        await Task.Delay(100);

        RestartWindows();
    }

    static void RestartWindows()
    {
        // Start a new instance
        Process.Start(Environment.ProcessPath!);

        // Quit the current app
        Application.Current?.Quit();
    }

    // async Task DisconnectDb()
    // {
    //     await DbContextUtilities.DisconnectFromDbAsync();
    // }

    // async Task ConnectToDb()
    // {
    //     await DbContextUtilities.ConnectToDbAsync();
    // }

    // async Task DisposeDbContext()
    // {
    //     await DbContextUtilities.DisposeDbContextAsync();
    // }
}